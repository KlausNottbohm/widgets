{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-brown",
    "glyph" : "id-card"
  },
  "name" : "Corona RKI",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: magic;\n\/\/ Licence: Robert Koch-Institut (RKI), dl-de\/by-2-0\n\/\/\n\n\/\/ ---------------------------\n\/\/ do not edit after this line\n\/\/ ---------------------------\nconst DAY_IN_MICROSECONDS = 86400000;\nconst lineWeight = 2;\nconst vertLineWeight = 36;\nconst accentColor1 = new Color('#33cc33', 1);\nconst accentColor2 = Color.lightGray();\n\n\/\/ colors for incidence highlighting\nconst colorLow = new Color('#FAD643', 1); \/\/ < 50\nconst colorMed = new Color('#E8B365', 1); \/\/ < 100\nconst colorHigh = new Color('#DD5045', 1); \/\/ < 200\nconst colorUltra = new Color('#8E0000', 1); \/\/ >= 200\n\nconst apiUrl = (location) => `https:\/\/services7.arcgis.com\/mOBPykOjAyBO2ZKk\/arcgis\/rest\/services\/RKI_Landkreisdaten\/FeatureServer\/0\/query?where=1%3D1&outFields=GEN,EWZ,cases,death_rate,deaths,cases7_per_100k,cases7_bl_per_100k,BL,county&geometry=${ location.longitude.toFixed( 3 ) }%2C${ location.latitude.toFixed( 3 ) }&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelWithin&returnGeometry=false&outSR=4326&f=json`;\n\nconst diviApiUrl = (location) => `https:\/\/services7.arcgis.com\/mOBPykOjAyBO2ZKk\/arcgis\/rest\/services\/DIVI_Intensivregister_Landkreise\/FeatureServer\/0\/query?where=1%3D1&outFields=*&geometry=${ location.longitude.toFixed( 3 ) }%2C${ location.latitude.toFixed( 3 ) }&geometryType=esriGeometryPoint&inSR=4326&spatialRel=esriSpatialRelWithin&returnGeometry=false&outSR=4326&f=json`;\n\nconst widgetHeight = 338;\nconst widgetWidth = 720;\nconst graphLow = 200;\nconst graphHeight = 100;\nconst spaceBetweenDays = 47.5;\nconst bedsGraphBaseline = 290;\nconst bedsPaddingLeft = 32;\nconst bedsPaddingRight = 32;\nconst bedsLineWidth = 12;\n\n\nconst saveIncidenceLatLon = (location) => {\n let fm = FileManager.iCloud();\n let path = fm.joinPath(fm.documentsDirectory(), 'covid19latlon.json');\n fm.writeString(path, JSON.stringify(location));\n};\n\nconst getSavedIncidenceLatLon = () => {\n let fm = FileManager.iCloud();\n let path = fm.joinPath(fm.documentsDirectory(), 'covid19latlon.json');\n let data = fm.readString(path);\n return JSON.parse(data);\n};\n\nlet drawContext = new DrawContext();\ndrawContext.size = new Size(widgetWidth, widgetHeight);\ndrawContext.opaque = false;\n\nlet widget = await createWidget();\nwidget.setPadding(0, 0, 0, 0);\nwidget.backgroundImage = (drawContext.getImage());\nawait widget.presentMedium();\n\nScript.setWidget(widget);\nScript.complete();\n\nasync function createWidget(items) {\n let location;\n\n if (args.widgetParameter) {\n   console.log('get fixed lat\/lon');\n   const fixedCoordinates = args.widgetParameter.split(',').map(parseFloat);\n   location = {\n     latitude: fixedCoordinates[0],\n     longitude: fixedCoordinates[1]\n   };\n } else {\n   Location.setAccuracyToThreeKilometers();\n   try {\n     location = await Location.current();\n     console.log('get current lat\/lon'+location.longitude);\n     saveIncidenceLatLon(location);\n   } catch (e) {\n     console.log('using saved lat\/lon');\n     location = getSavedIncidenceLatLon();\n   }\n }\n\n const locationData = await new Request(apiUrl(location)).loadJSON();\n\n if (!locationData || !locationData.features || !locationData.features.length) {\n   const errorList = new ListWidget();\n   errorList.backgroundColor = new Color('#191a1d', 1);\n   errorList.addText('Keine Ergebnisse für den aktuellen Ort gefunden.');\n   return errorList;\n }\n\n const diviLocationData = await new Request(diviApiUrl(location)).loadJSON();\n\n if (!diviLocationData || !diviLocationData.features || !diviLocationData.features.length) {\n   const errorList = new ListWidget();\n   errorList.backgroundColor = new Color('#191a1d', 1);\n   errorList.addText('Keine DIVI-Ergebnisse für den aktuellen Ort gefunden.');\n   return errorList;\n }\n\n const attr = locationData.features[0].attributes;\n const diviAttr = diviLocationData.features[0].attributes;\n const cityName = attr.GEN;\n const ewz = attr.EWZ \/ 100000;\n const county = attr.county;\n const freeBeds = diviAttr.betten_frei;\n const beds = diviAttr.betten_gesamt;\n const usedBeds = diviAttr.betten_belegt;\n const cases = diviAttr.faelle_covid_aktuell;\n const list = new ListWidget();\n const date = new Date();\n date.setTime(date.getTime() - 21 * DAY_IN_MICROSECONDS);\n const minDate = ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2) + '-' + date.getFullYear();\n const apiUrlData = `https:\/\/services7.arcgis.com\/mOBPykOjAyBO2ZKk\/arcgis\/rest\/services\/Covid19_RKI_Sums\/FeatureServer\/0\/query?where=Landkreis+LIKE+%27%25${ encodeURIComponent( county ) }%25%27+AND+Meldedatum+%3E+%27${ encodeURIComponent( minDate ) }%27&objectIds=&time=&resultType=none&outFields=*&returnIdsOnly=false&returnUniqueIdsOnly=false&returnCountOnly=false&returnDistinctValues=false&cacheHint=false&orderByFields=Meldedatum&groupByFieldsForStatistics=&outStatistics=&having=&resultOffset=&resultRecordCount=&sqlFormat=none&f=json&token=`;\n\n const cityData = await new Request(apiUrlData).loadJSON();\n\n if (!cityData || !cityData.features || !cityData.features.length) {\n   const errorList = new ListWidget();\n   errorList.backgroundColor = new Color('#191a1d', 1);\n   errorList.addText('Keine Statistik gefunden.');\n   return errorList;\n }\n\n list.backgroundColor = new Color('#191a1d', 1);\n\n drawContext.setTextColor(Color.white());\n drawContext.setFont(Font.mediumSystemFont(26));\n drawContext.drawText('🦠 7-Tage-Inzidenz'.toUpperCase() + ' ' + cityName, new Point(25, 25));\n\n\n \/\/  Draw graph for ICU beds\n const bedsRight = widgetWidth - bedsPaddingRight;\n const freeBedsWidth = (bedsRight \/ beds) * freeBeds;\n const covidBedsWidth = (bedsRight \/ beds) * cases;\n\n \/\/ Line representing all beds\n drawLine(new Point(bedsPaddingLeft, bedsGraphBaseline), new Point(bedsRight, bedsGraphBaseline), bedsLineWidth, new Color('#939598', 1));\n let bedsRect = new Rect(bedsPaddingLeft, bedsGraphBaseline - 40, bedsRight - freeBedsWidth - bedsPaddingLeft - 10, 26);\n drawContext.setFont(Font.mediumSystemFont(26));\n drawContext.drawTextInRect('🛏 ' + beds + ' Intensivbetten'.toUpperCase(), bedsRect)\n\n \/\/ Portion representing free beds\n drawLine(new Point(bedsRight - freeBedsWidth, bedsGraphBaseline), new Point(bedsRight, bedsGraphBaseline), bedsLineWidth, new Color('#4D8802', 1));\n drawLine(new Point(bedsRight - freeBedsWidth, bedsGraphBaseline), new Point(bedsRight - freeBedsWidth, bedsGraphBaseline - 2 * bedsLineWidth), 3, new Color('#4D8802', 1));\n drawContext.setFont(Font.mediumSystemFont(22));\n let freeRect = new Rect(bedsPaddingLeft, bedsGraphBaseline - 35, bedsRight - freeBedsWidth - bedsPaddingLeft - 10, 22);\n drawContext.setTextAlignedRight();\n drawContext.drawTextInRect(freeBeds + ' frei', freeRect)\n\n \/\/ Portion representing covid patients\n drawLine(new Point(bedsPaddingLeft, bedsGraphBaseline), new Point(bedsPaddingLeft + covidBedsWidth, bedsGraphBaseline), bedsLineWidth, new Color('#F6522E', 1));\n drawLine(new Point(bedsPaddingLeft + covidBedsWidth, bedsGraphBaseline), new Point(bedsPaddingLeft + covidBedsWidth, bedsGraphBaseline + 2 * bedsLineWidth), 3, new Color('#F6522E', 1));\n let covidRect = new Rect(bedsPaddingLeft + covidBedsWidth + 10, bedsGraphBaseline + 10, bedsRight - covidBedsWidth, 22);\n drawContext.setTextAlignedLeft();\n drawContext.drawTextInRect(cases + ' COVID-19', covidRect);\n\n \/\/ Draw incidence graph\n drawContext.setFont(Font.mediumSystemFont(22));\n drawContext.setTextAlignedCenter();\n\n let min, max, diff;\n\n \/\/ calculate incidence in place.\n for (let i = cityData.features.length - 1; i >= 6; i--) {\n   let sum = 0;\n\n   for (let j = 0; j < 7; j++) {\n     sum += cityData.features[i - j].attributes.AnzahlFall;\n   }\n\n   sum \/= ewz;\n   cityData.features[i].attributes.AnzahlFall = Math.round(sum);\n }\n\n cityData.features.splice(0, 6);\n\n\n for (let i = 0; i < cityData.features.length; i++) {\n   let aux = cityData.features[i].attributes.AnzahlFall;\n\n   \/\/ min = (aux < min || min == undefined ? aux : min);\n   max = (aux > max || max == undefined ? aux : max);\n }\n\n min = 0;\n diff = max - min;\n\n const highestIndex = cityData.features.length - 1;\n\n for (let i = 0, j = highestIndex; i < cityData.features.length; i++, j--) {\n   const day = (new Date(cityData.features[i].attributes.Meldedatum)).getDate();\n   const dayOfWeek = (new Date(cityData.features[i].attributes.Meldedatum)).getDay();\n   const cases = cityData.features[i].attributes.AnzahlFall;\n   const delta = (cases - min) \/ diff;\n\n   \/\/ Vertical Line\n\n   let drawColor;\n\n   if (cases < 50) {\n     drawColor = colorLow;\n   } else if (cases < 100) {\n     drawColor = colorMed;\n   } else if (cases < 200) {\n     drawColor = colorHigh;\n   } else {\n     drawColor = colorUltra;\n   }\n\n   const point1 = new Point(spaceBetweenDays * i + 50, graphLow - (graphHeight * delta));\n   const point2 = new Point(spaceBetweenDays * i + 50, graphLow + 10);\n   drawLine(point1, point2, vertLineWeight, drawColor);\n\n   let dayColor;\n\n   if (dayOfWeek == 0 || dayOfWeek == 6) {\n     dayColor = accentColor2;\n   } else {\n     dayColor = Color.white();\n   }\n\n   const casesRect = new Rect(spaceBetweenDays * i + 20, (graphLow - 40) - (graphHeight * delta), 60, 23);\n   const dayRect = new Rect(spaceBetweenDays * i + 27, graphLow + 15, 50, 23);\n\n   drawTextR(cases, casesRect, dayColor, Font.systemFont(21));\n   drawTextR(day, dayRect, dayColor, Font.systemFont(21));\n }\n\n return list;\n}\n\nfunction drawTextR(text, rect, color, font) {\n drawContext.setFont(font);\n drawContext.setTextColor(color);\n drawContext.drawTextInRect(new String(text).toString(), rect);\n}\n\nfunction drawLine(point1, point2, width, color) {\n const path = new Path();\n path.move(point1);\n path.addLine(point2);\n drawContext.addPath(path);\n drawContext.setStrokeColor(color);\n drawContext.setLineWidth(width);\n drawContext.strokePath();\n}",
  "share_sheet_inputs" : [

  ]
}
